{"version":3,"sources":["../../src/middleware/sheets-helper.js"],"names":["COL_COUNT","INFO_SHEET_INDEX","EXISTING_URL_INDEX","NEW_URL_INDEX","BROKEN_LINKS_INDEX","BROKEN_LINKS_SHEET_ID","prepareToCrawl","req","res","next","date","Date","runTimer","console","log","toTimeString","getDoc","then","getWorksheets","doc","googleSheets","info","existingUrlsSheet","worksheets","getSheetRows","checkExistingRows","rows","moveNewUrls","getUrls","pagesToCrawl","urlsArray","catch","err","send","message","processPageData","pagesCrawled","brokenLinks","updatePromise","linksPromise","length","notification","newUrlSheet","rowCount","Math","max","colCount","newOptions","sheet","minRow","newCells","isCellToCell","updateSheetCells","brokenLinkSheet","clearLinksOptions","headers","addLinksOptions","clearSheet","Promise","all","getEmails","docId","body","client_email","private_key","credsJson","resolve","reject","useServiceAccountAuth","getInfo","Error","promiseArray","i","thisRow","index","timeout","checkRow","row","setTimeout","url","status","del","save","getCells","clearOptions","clearPromise","msg","existingUrlSheet","newRowCount","existingRowCount","revisedRowCount","revisedColCount","options","results","infoSheet","emailRow","emailrecipients","emails","split","emailList","urlSheet","filter","map","replace","parseFloat","getRows","offset","orderby","clear","setHeaderRow","resize","existingCells","properties","id","thisExistingCell","thisNewCell","floor","value","propertyIndex","col","bulkUpdateCells"],"mappings":"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","file":"sheets-helper.js","sourcesContent":["import GoogleSpreadsheet from 'google-spreadsheet';\n// import heapdump from 'heapdump';\nimport configAuth from '../config/auth.js';\n\nconst COL_COUNT = 2;\nconst INFO_SHEET_INDEX = 0;\nconst EXISTING_URL_INDEX = 1;\nconst NEW_URL_INDEX = 2;\nconst BROKEN_LINKS_INDEX = 2;\nconst BROKEN_LINKS_SHEET_ID = 4;\n\nfunction prepareToCrawl(req, res, next) {\n  const date = new Date();\n  req.runTimer = date;\n  console.log('Start', date.toTimeString());\n\n  getDoc(req)\n    .then(doc => {\n      return getWorksheets(doc);\n    })\n    .then(info => {\n      req.googleSheets = {info};\n      const existingUrlsSheet = info.worksheets[EXISTING_URL_INDEX];\n      return getSheetRows(existingUrlsSheet);\n    })\n    .then(rows => {\n      return checkExistingRows(req.googleSheets.info, rows);\n    })\n    .then(info => {\n      return moveNewUrls(info);\n    })\n    .then(info => {\n      return getUrls(info, EXISTING_URL_INDEX);\n    })\n    .then(urlsArray => {\n      req.pagesToCrawl = urlsArray;\n      next();\n    })\n    .catch(err => {\n      console.log(err);\n      res.send(err.message);\n    }\n  );\n}\n\nfunction processPageData(req, res, next) {\n  const date = new Date();\n  console.log('Process Data', date.toTimeString());\n\n  const {pagesCrawled, googleSheets: {info}, brokenLinks} = req;\n  let updatePromise, linksPromise;\n\n  if (pagesCrawled && pagesCrawled.length) {\n    req.notification = true;\n    const newUrlSheet = info.worksheets[NEW_URL_INDEX];\n    const rowCount = Math.max(pagesCrawled.length + 1, newUrlSheet.rowCount);\n    const colCount = Math.max(COL_COUNT, newUrlSheet.colCount);\n    const newOptions = {\n      sheet: newUrlSheet,\n      rowCount,\n      colCount,\n      minRow: 2,\n      newCells: pagesCrawled,\n      isCellToCell: false\n    };\n\n    updatePromise = updateSheetCells(newOptions)\n      .then(sheet => {\n        return 'new urls added';\n      })\n      .catch(err => {\n        throw err;\n      }\n    );\n  }\n\n  if (brokenLinks && brokenLinks.length) {\n    req.notification = true;\n    const brokenLinkSheet = info.worksheets[BROKEN_LINKS_INDEX];\n    const rowCount =\n      Math.max(brokenLinks + 1, brokenLinkSheet.rowCount);\n    const colCount = Math.max(COL_COUNT, brokenLinkSheet.colCount);\n    const clearLinksOptions = {\n      sheet: brokenLinkSheet,\n      headers: ['page_url', 'link_url']\n    };\n    const addLinksOptions = {\n      sheet: brokenLinkSheet,\n      rowCount,\n      colCount,\n      minRow: 2,\n      newCells: brokenLinks,\n      isCellToCell: false\n    };\n\n    linksPromise = clearSheet(clearLinksOptions)\n      .then(msg => {\n        return updateSheetCells(addLinksOptions);\n      })\n      .then(sheet => {\n      })\n      .catch(err => {\n        throw err;\n      }\n    );\n  }\n\n  Promise.all([updatePromise, linksPromise])\n    .then(results => {\n      getEmails(req, res, next);\n    })\n    .catch(err => {\n      console.log(err);\n      res.send(err.message);\n    }\n  );\n}\n\n// Start by getting the sheet by ID\nfunction getDoc(req) {\n  // First option is to use ID entered into the form, then any environment\n  // variables\n  const {docId} = req.body;\n  const doc = new GoogleSpreadsheet(docId);\n  const {client_email, private_key} = configAuth;\n  // Credentials obtained via environment variables imported to auth.js\n  const credsJson = {client_email, private_key};\n\n  return new Promise((resolve, reject) => {\n    doc.useServiceAccountAuth(credsJson, err => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(doc);\n      }\n    });\n  });\n}\n\n// Get correct sheet, depending on whether your reading or writing\nfunction getWorksheets(doc) {\n  return new Promise((resolve, reject) => {\n    doc.getInfo((err, info) => {\n      if (!info) {\n        reject(Error('The Google Sheets ID was invalid.'));\n      } else if (err) {\n        reject(err);\n      // If you've already crawled, write rows to new URLs sheet\n      } else {\n        resolve(info);\n      }\n    });\n  });\n}\n\n// Function for deleting rows that are missing URLs and adding status 200\n// to rows without statuses\nfunction checkExistingRows(info, rows) {\n  const promiseArray = [];\n\n  for (let i = rows.length - 1; i > 0; i--) {\n    let thisRow = rows[i];\n\n    // resetTimer(thisRow, i);\n    if (i % 500 === 0) {\n      const index = i;\n\n      promiseArray[index] = timeout(thisRow)\n        .then(row => {\n          return checkRow(row);\n        })\n        .catch(err => {\n          throw err;\n        }\n      );\n    } else {\n      promiseArray[i] = checkRow(thisRow);\n    }\n  }\n\n  return Promise.all(promiseArray)\n    .then(results => {\n      return new Promise((resolve, reject) => {\n        resolve(info);\n      });\n    })\n    .catch(err => {\n      throw err;\n    }\n  );\n\n  function timeout(row) {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve(row);\n      }, 0);\n    });\n  }\n\n  function checkRow(row) {\n    return new Promise((resolve, reject) => {\n      if (row.url && row.status) {\n        resolve();\n      } else if (row.status) {\n        row.del(err => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve();\n          }\n        });\n      } else {\n        row.status = 200;\n        row.save(err => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve();\n          }\n        });\n      }\n    });\n  }\n}\n\n// Copy URLs from 'New/Modified URLs' over to 'Existing URLs'\nfunction moveNewUrls(info) {\n  const newUrlSheet = info.worksheets[NEW_URL_INDEX];\n\n  return new Promise((resolve, reject) => {\n    newUrlSheet.getCells({\n      'min-row': 2,\n      'min-col': 1,\n      'max-col': COL_COUNT,\n      'return-empty': false\n    }, (err, newCells) => {\n      if (err) {\n        reject(err);\n      }\n\n      const clearOptions = {\n        sheet: newUrlSheet,\n        headers: ['url', 'status']\n      };\n      const clearPromise = clearSheet(clearOptions)\n        .then(msg => {\n          return msg;\n        })\n        .catch(err => {\n          throw err;\n        });\n      const existingUrlsSheet = info.worksheets[EXISTING_URL_INDEX];\n      const updatePromise = getSheetRows(existingUrlsSheet)\n        .then(rows => {\n          const existingUrlSheet = info.worksheets[EXISTING_URL_INDEX];\n          const newRowCount = newCells.length / COL_COUNT;\n          const existingRowCount = rows.length;\n          const minRow = existingRowCount + 1;\n          const revisedRowCount = Math.max(\n            existingRowCount + newRowCount,\n            existingUrlSheet.rowCount\n          );\n          const revisedColCount =\n            Math.max(COL_COUNT, existingUrlSheet.colCount);\n          const options = {\n            sheet: existingUrlSheet,\n            rowCount: revisedRowCount,\n            colCount: revisedColCount,\n            minRow,\n            newCells,\n            isCellToCell: true\n          };\n\n          return updateSheetCells(options);\n        })\n        .then(sheet => {\n          return sheet;\n        })\n        .catch(err => {\n          throw err;\n        }\n      );\n\n      Promise.all([clearPromise, updatePromise])\n        .then(results => {\n          resolve(results[1]);\n        })\n        .catch(err => {\n          throw err;\n        }\n      );\n    });\n  });\n}\n\n// Gets e-mail addresses listed in Google Sheets to send\n// a notification e-mail\nfunction getEmails(req, res, next) {\n  const {googleSheets: {info}, notification} = req;\n\n  // heapdump.writeSnapshot((err, filename) => {\n  //   if (err) console.log(err);\n  //   console.log('dump written to', filename);\n  // });\n\n  // Only send an e-mail if there are new URLs or broken links\n  if (notification) {\n    const infoSheet = info.worksheets[INFO_SHEET_INDEX];\n    getSheetRows(infoSheet)\n      .then(rows => {\n        // **** NOTE: 'getRows' removes '_' from column names ****\n        const emailRow = rows[0].emailrecipients;\n\n        if (emailRow) {\n          // Save e-mail list as array to pass on to Postmark\n          const emails = emailRow.split(/,\\s*/g);\n          req.emailList = emails;\n        }\n        next();\n      })\n      .catch(err => {\n        console.log(err);\n        res.send(err.message);\n      });\n  } else {\n    const date = new Date();\n    console.log(date.toTimeString(), 'No new info');\n    next();\n  }\n}\n\n// Collect array of URLs that you want to check\n// (found in 'Existing URLs' sheet)\nfunction getUrls(urlSheet) {\n  return getSheetRows(urlSheet)\n    .then(rows => {\n      // Push all rows of 'Existing URLs' into 'pagesToCrawl' for use\n      // by crawler.js\n      const urlsArray = rows\n        .filter(row => {\n          return row.url && row;\n        })\n        .map(function(row) {\n          return {\n            url: row.url.replace(/\\/$/, ''),\n            status: parseFloat(row.status)\n          };\n        });\n\n      return urlsArray;\n    })\n    .catch(err => {\n      throw err;\n    }\n  );\n}\n\nfunction getSheetRows(sheet) {\n  return new Promise((resolve, reject) => {\n    sheet.getRows({offset: 1, orderby: 'col2'},\n      (err, rows) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(rows);\n        }\n      }\n    );\n  });\n}\n\nfunction clearSheet(options) {\n  const {sheet, headers} = options;\n\n  return new Promise((resolve, reject) => {\n    sheet.clear(err => {\n      if (err) {\n        reject(err);\n      } else {\n        sheet.setHeaderRow(\n        headers,\n        err => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve('clear done');\n          }\n        });\n      }\n    });\n  });\n}\n\nfunction updateSheetCells(options) {\n  const {\n    sheet,\n    rowCount,\n    colCount,\n    minRow,\n    newCells,\n    isCellToCell\n  } = options;\n\n  return new Promise((resolve, reject) => {\n    sheet.resize({\n      'rowCount': rowCount,\n      'colCount': colCount\n    }, err => {\n      if (err) {\n        reject(err);\n      }\n\n      sheet.getCells({\n        'min-row': minRow,\n        'min-col': 1,\n        'max-col': COL_COUNT,\n        'return-empty': true\n      }, (err, existingCells) => {\n        if (err) {\n          reject(err);\n        }\n\n        const properties = sheet.id === BROKEN_LINKS_SHEET_ID ?\n          ['page_url', 'link_url'] :\n          ['url', 'status'];\n\n        for (let i = 0; i < existingCells.length; i++) {\n          const thisExistingCell = existingCells[i];\n          const thisNewCell = isCellToCell ?\n            newCells[i] :\n            newCells[Math.floor(i / COL_COUNT)];\n\n          if (thisNewCell && thisExistingCell) {\n            if (isCellToCell) {\n              thisExistingCell.value = thisNewCell.value;\n            } else {\n              const propertyIndex = thisExistingCell.col - 1;\n              const value = thisNewCell[properties[propertyIndex]];\n              thisExistingCell.value = value;\n            }\n          }\n        }\n\n        sheet.bulkUpdateCells(existingCells, err => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(sheet);\n          }\n        });\n      });\n    });\n  });\n}\n\nexport {prepareToCrawl, processPageData};\n"]}