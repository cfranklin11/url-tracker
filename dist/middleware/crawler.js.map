{"version":3,"sources":["../../src/middleware/crawler.js"],"names":["pagesToVisit","changedPages","errorPages","brokenLinks","loopCount","requestCount","PAGE_REG_EXP","TYPE_REG_EXP","checkUrls","req","res","next","console","log","pagesToCrawl","i","length","thisPage","url","test","status","continueLoop","thisPageToVisit","currentCount","setTimeout","requestPage","pagesCrawled","pageUrl","currentIndex","wasVisited","indexOf","error","response","body","date","Date","toTimeString","loopBack","statusCode","pageObj","isInPagesToCrawl","findIndex","page","isChanged","parseFloat","collectLinks","$","load","urlObj","domainBaseUrl","hostname","domainRegExp","RegExp","protocol","linkTagsObj","link","linkRef","attr","isAbsolute","revisedLinkRef","replace","linkUrl","linkObj","page_url","link_url","isCorrectLinkType","isCorrectPageType","isCorrectDomain","isInError","isInBroken","toVisitIndex","isInToVisit"],"mappings":"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","file":"crawler.js","sourcesContent":["/* eslint no-loop-func: 0 */\n\nimport request from 'request';\nimport cheerio from 'cheerio';\nimport urlParse from 'url-parse';\nimport sizeof from 'object-sizeof';\n// import heapdump from 'heapdump';\n\n// Arrays for keeping track of page info as the crawler iterates through\n// pages\nlet pagesToVisit = [];\nlet changedPages = [];\nlet errorPages = [];\nlet brokenLinks = [];\nlet loopCount = 0;\nlet requestCount = 0;\n// RegExps to skip unimportant pages (PAGE_REG_EXP) and not to crawl non-html\n// pages for links (TYPE_REG_EXP), because that results in errors\nconst PAGE_REG_EXP = /permalink|visited-locations|transcripts|news/i;\nconst TYPE_REG_EXP = /\\.zip|\\.doc|\\.ppt|\\.csv|\\.xls|\\.jpg|\\.ash|\\.png|\\.aspx/i;\n\n// Starts the process by building the necessary page arrays\nfunction checkUrls(req, res, next) {\n  console.log('checkUrls');\n  const {pagesToCrawl} = req;\n\n  // Loop through existing URLs pulled from Google Sheets,\n  // adding them to 'pagesToVisit' and 'errorPages' arrays\n  for (let i = 0; i < pagesToCrawl.length; i++) {\n    const thisPage = pagesToCrawl[i];\n\n    pagesToVisit[pagesToVisit.length] = thisPage.url;\n\n    if (/40\\d/.test(thisPage.status)) {\n      errorPages[errorPages.length] = thisPage.url;\n    }\n  }\n\n  continueLoop(req, res, next);\n}\n\nfunction continueLoop(req, res, next) {\n  if (loopCount < pagesToVisit.length) {\n    for (loopCount; loopCount < pagesToVisit.length; loopCount++) {\n      const thisPageToVisit = pagesToVisit[loopCount];\n\n      if (thisPageToVisit) {\n        const currentCount = loopCount;\n\n        if (loopCount % 500 === 0) {\n          // heapdump.writeSnapshot((err, filename) => {\n          //   if (err) console.log(err);\n          //   console.log('dump written to', filename);\n          // });\n\n          setTimeout(() => {\n            requestCount++;\n            requestPage(req, res, next, thisPageToVisit, currentCount);\n          }, 0);\n        } else {\n          requestCount++;\n          requestPage(req, res, next, thisPageToVisit, currentCount);\n        }\n      } else {\n        req.pagesCrawled = changedPages;\n        req.brokenLinks = brokenLinks;\n        next();\n      }\n    }\n  } else {\n    req.pagesCrawled = changedPages;\n    req.brokenLinks = brokenLinks;\n    next();\n  }\n}\n\n// Makes HTTP requests\nfunction requestPage(req, res, next, pageUrl, currentIndex) {\n  // Only request the page if you haven't visited it yet\n  const wasVisited = pagesToVisit.indexOf(pageUrl) < currentIndex;\n\n  if (pageUrl && !wasVisited) {\n    request(pageUrl, (error, response, body) => {\n      // console.log(sizeof(response));\n      console.log(response);\n      const date = new Date();\n      console.log(currentIndex, date.toTimeString(), pageUrl);\n\n      if (error) {\n        console.log(pageUrl);\n        console.log(error);\n        changedPages[changedPages.length] = {url: pageUrl, status: 404};\n        loopBack(req, res, next);\n      } else {\n        const {statusCode} = response;\n        const pageObj = {\n          url: pageUrl,\n          status: statusCode\n        };\n        // If the page doesn't exist on Current URLs sheet,\n        // add it to 'changedPages'\n        const isInPagesToCrawl = req.pagesToCrawl.findIndex(page => {\n          return page.url === pageObj.url && page.status === pageObj.status;\n        }) !== -1;\n\n        if (!isInPagesToCrawl) {\n          pageObj.isChanged = !isInPagesToCrawl;\n          changedPages[changedPages.length] = pageObj;\n        }\n\n        // If the page is working & the body is html,\n        // collect links for other pages\n        if (parseFloat(statusCode) === 200 && /<?\\/?html>/.test(body)) {\n          collectLinks(req, res, next, pageUrl, body);\n        } else {\n          loopBack(req, res, next);\n        }\n      }\n    });\n  } else {\n    loopBack(req, res, next);\n  }\n}\n\n// Scrape page for internal links to add to 'pagesToVisit'\nfunction collectLinks(req, res, next, pageUrl, body) {\n  const $ = cheerio.load(body);\n  const urlObj = new urlParse(pageUrl);\n  const domainBaseUrl = urlObj.hostname;\n  const domainRegExp = new RegExp(domainBaseUrl);\n  const protocol = urlObj.protocol;\n  // Collect URLs from link tags (adding current domain to relative links)\n  const linkTagsObj = $('a[href]');\n\n  for (let i = 0; i < linkTagsObj.length; i++) {\n    const link = linkTagsObj[i];\n    const linkRef = $(link).attr('href');\n    const isAbsolute = /http/i.test(linkRef);\n    const revisedLinkRef = linkRef === '/' ?\n      '' :\n      linkRef.replace(/\\?.*/, '').replace(/#.*/, '').replace(/\\/$/, '');\n    const linkUrl = isAbsolute ?\n      revisedLinkRef :\n      `${protocol}//${domainBaseUrl}${revisedLinkRef}`;\n    const linkObj = {\n      page_url: pageUrl,\n      link_url: linkUrl\n    };\n    const isCorrectLinkType = /^(?:\\/|http)/i.test(linkRef);\n    const isCorrectPageType =\n      !PAGE_REG_EXP.test(linkRef) && !TYPE_REG_EXP.test(linkRef);\n    const isCorrectDomain = isAbsolute ? domainRegExp.test(linkRef) : true;\n    const isInError = errorPages.indexOf(linkUrl) !== -1;\n    const isInBroken = brokenLinks.findIndex(link => {\n      return link.page_url === pageUrl && link.link_url === linkUrl;\n    }) !== -1;\n    const toVisitIndex = pagesToVisit.indexOf(linkUrl);\n    const isInToVisit = toVisitIndex !== -1;\n\n    if (isCorrectLinkType && isCorrectPageType && isCorrectDomain) {\n      // If the URL is in 'errorPages' and not 'brokenLinks',\n      // add it to 'brokenLinks'\n      if (isInError && !isInBroken) {\n        brokenLinks[brokenLinks.length] = linkObj;\n      // Otherwise, add URL to 'pagesToVisit'\n      } else if (!isInToVisit) {\n        pagesToVisit[pagesToVisit.length] = linkUrl;\n      }\n    }\n  }\n\n  pageUrl = null;\n  body = null;\n  loopBack(req, res, next);\n}\n\nfunction loopBack(req, res, next) {\n  requestCount--;\n\n  if (requestCount === 0) {\n    console.log(`toCrawl: ${req.pagesToCrawl.length}`,\n      `changed: ${changedPages.length}`,\n      `toVisit: ${pagesToVisit.length}`);\n  }\n\n  if (requestCount === 0) {\n    if (req.pagesToCrawl.length + changedPages.length < pagesToVisit.length) {\n      continueLoop(req, res, next);\n    } else {\n      req.pagesCrawled = changedPages;\n      req.brokenLinks = brokenLinks;\n      next();\n    }\n  }\n}\n\nexport default checkUrls;\n"]}